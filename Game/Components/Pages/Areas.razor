@page "/areas"
@using Game.Data.Models
@using Game.Data.Models.Areas
@using System.Text
@using Game.Data.Models.Resources
@rendermode InteractiveServer
@inject NewGame Game

<div class="area-container">
	@foreach (var area in Game.Player.Areas)
	{
		<div class="area-card">
			<div class="area-card-inner">
				<div class="area-card-front">
					<h3>@area.Name</h3>
					<p>@AreaResourceDescription[area.Name]</p>
					<p>@AreaCostToTravel[area.Name]</p>

				</div>
				<div class="area-card-back">
					@if (area.Visiting)
					{
						<button class="btn btn-primary disabled">Visiting!</button>
					}
					@if (!area.Visiting)
					{
						<button class="btn btn-primary" @onclick="() => TravelToArea(area)">Travel</button>
					}
				</div>
			</div>
		</div>

	}
</div>

<style>
	.area-container {
		display: flex;
		flex-wrap: wrap;
		gap: 20px;
		justify-content: center;
		padding: 20px;
		background-color: #f9f9f9;
	}

	.area-card {
		width: 300px;
		height: 200px;
		perspective: 1000px;
		margin: 10px;
	}

	.area-card-inner {
		width: 100%;
		height: 100%;
		position: relative;
		transform-style: preserve-3d;
		transition: transform 0.6s;
	}

	.area-card:hover .area-card-inner {
		transform: rotateY(180deg);
	}

	.area-card-front, .area-card-back {
		position: absolute;
		width: 100%;
		height: 100%;
		backface-visibility: hidden;
		border-radius: 8px;
		box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
		padding: 20px;
		text-align: center;
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;
	}

	.area-card-front {
		background: linear-gradient(135deg, #6dabe4, #a8edea);
		color: white;
	}

	.area-card-back {
		background: linear-gradient(135deg, #ff9a9e, #fad0c4);
		color: white;
		transform: rotateY(180deg);
	}

	h3 {
		font-size: 1.5rem;
		margin-bottom: 10px;
	}

	p {
		font-size: 1rem;
		margin: 5px 0;
	}

	.btn-primary {
		background-color: #007bff;
		color: white;
		border: none;
		padding: 10px 20px;
		border-radius: 5px;
		cursor: pointer;
		transition: background-color 0.3s, transform 0.3s;
	}

		.btn-primary:hover {
			background-color: #0056b3;
			transform: scale(1.05);
		}
</style>

@code {
	private Dictionary<string, string> AreaResourceDescription { get; set; }
	private Dictionary<string, string> AreaCostToTravel { get; set; }

	protected override void OnInitialized()
	{
		SetResourcesAvailableInArea();
		SetCostToTravel();
	}

	private void SetCostToTravel()
	{
		AreaCostToTravel = new();
		var sb = new StringBuilder();

		foreach (var area in Game.Player.Areas)
		{
			sb.Append("Cost to Travel: ");
			sb.Append(SetCostDescription(area));
			AreaCostToTravel.Add(area.Name, sb.ToString());
			sb.Clear();
		}
	}

	private string SetCostDescription(Area area)
	{
		var sb = new StringBuilder();
		var distinctAreaItems = area.CostToTravel.Select(x => x.Name).Distinct();

		if (distinctAreaItems.Count() < 1)
		{
			return sb.Append("Free").ToString();
		}

		var firstItem = true;
		foreach (var distinctItem in distinctAreaItems)
		{
			var quantityOfItem = area.CostToTravel.Count(x => x.Name == distinctItem);

			if (!firstItem) { sb.Append(","); }
			sb.Append($" {quantityOfItem} {distinctItem}s");
			firstItem = false;
		}

		return sb.ToString();
	}

	private void SetResourcesAvailableInArea()
	{
		AreaResourceDescription = new();
		var sb = new StringBuilder();

		foreach (var area in Game.Player.Areas)
		{
			sb.Append("Resources at Island: ");
			foreach (var resource in area.AvailableResources)
			{
				sb.Append($" {resource.Name};");
			}

			AreaResourceDescription.Add(area.Name, sb.ToString());
			sb.Clear();
		}
	}

	private void TravelToArea(Area area)
	{
		Game.Player.Resources.Clear();
		Game.Player.Resources = area.AvailableResources;
	}
}
