@page "/combat"
@using Game.Data.Models
@using Game.Data.Models.Areas
@rendermode InteractiveServer
@inject NewGame Game

<div class="combat-container">
    <div class="combat-header">
        <h2>Combat Arena</h2>
        <p>Current Area: @CurrentArea.Name</p>
        <p>Player Health: @PlayerHealth</p>
        <p>Enemy Health: @EnemyHealth</p>
    </div>

    <div class="combat-arena">
        @if (!IsCombatOver)
    {
        <button class="btn btn-primary" @onclick="PlayerAttack">Attack</button>
        <button class="btn btn-secondary" @onclick="PlayerDefend">Defend</button>
        <button class="btn btn-danger" @onclick="FleeCombat">Flee</button>
    }
    else
    {
        <p>@CombatResult</p>
        <button class="btn btn-success" @onclick="RestartCombat">Restart Combat</button>
    }
    </div>
</div>

<style>
    .combat-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 20px;
    }

    .combat-header {
        text-align: center;
        margin-bottom: 20px;
    }

    .combat-arena {
        display: flex;
        flex-direction: column;
        gap: 10px;
        align-items: center;
    }

    .btn {
        padding: 10px 20px;
        border-radius: 5px;
        font-size: 16px;
        cursor: pointer;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }

    .btn-success {
        background-color: #28a745;
        color: white;
    }
</style>

@code {
private Area CurrentArea { get; set; }
private int PlayerHealth { get; set; } = 100;
private int EnemyHealth { get; set; } = 50;
private bool IsCombatOver { get; set; } = false;
private string CombatResult { get; set; } = string.Empty;

protected override void OnInitialized()
{
    CurrentArea = Game.Player.Areas.FirstOrDefault(x => x.Visiting) ?? Game.Player.Areas.First();
}

private void PlayerAttack()
{
    var playerDamage = Random.Shared.Next(10, 20);
    var enemyDamage = Random.Shared.Next(5, 15);

    EnemyHealth -= playerDamage;

    if (EnemyHealth <= 0)
    {
        IsCombatOver = true;
        CombatResult = "You defeated the enemy!";
        Game.Player.Gold += 50; // Reward for winning
        Game.OnStateChanged?.Invoke();
        return;
    }

    PlayerHealth -= enemyDamage;

    if (PlayerHealth <= 0)
    {
        IsCombatOver = true;
        CombatResult = "You were defeated by the enemy.";
        Game.OnStateChanged?.Invoke();
    }
}

private void PlayerDefend()
{
    var reducedDamage = Random.Shared.Next(3, 8);
    PlayerHealth -= reducedDamage;

    if (PlayerHealth <= 0)
    {
        IsCombatOver = true;
        CombatResult = "You were defeated while defending.";
        Game.OnStateChanged?.Invoke();
    }
}

private void FleeCombat()
{
    IsCombatOver = true;
    CombatResult = "You fled the battle!";
    Game.OnStateChanged?.Invoke();
}

private void RestartCombat()
{
    PlayerHealth = 100;
    EnemyHealth = 50;
    IsCombatOver = false;
    CombatResult = string.Empty;
}
}
